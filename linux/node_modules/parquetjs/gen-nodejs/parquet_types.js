//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.Type = {
'BOOLEAN' : 0,
'INT32' : 1,
'INT64' : 2,
'INT96' : 3,
'FLOAT' : 4,
'DOUBLE' : 5,
'BYTE_ARRAY' : 6,
'FIXED_LEN_BYTE_ARRAY' : 7
};
ttypes.ConvertedType = {
'UTF8' : 0,
'MAP' : 1,
'MAP_KEY_VALUE' : 2,
'LIST' : 3,
'ENUM' : 4,
'DECIMAL' : 5,
'DATE' : 6,
'TIME_MILLIS' : 7,
'TIME_MICROS' : 8,
'TIMESTAMP_MILLIS' : 9,
'TIMESTAMP_MICROS' : 10,
'UINT_8' : 11,
'UINT_16' : 12,
'UINT_32' : 13,
'UINT_64' : 14,
'INT_8' : 15,
'INT_16' : 16,
'INT_32' : 17,
'INT_64' : 18,
'JSON' : 19,
'BSON' : 20,
'INTERVAL' : 21,
'NULL' : 25
};
ttypes.FieldRepetitionType = {
'REQUIRED' : 0,
'OPTIONAL' : 1,
'REPEATED' : 2
};
ttypes.Encoding = {
'PLAIN' : 0,
'PLAIN_DICTIONARY' : 2,
'RLE' : 3,
'BIT_PACKED' : 4,
'DELTA_BINARY_PACKED' : 5,
'DELTA_LENGTH_BYTE_ARRAY' : 6,
'DELTA_BYTE_ARRAY' : 7,
'RLE_DICTIONARY' : 8
};
ttypes.CompressionCodec = {
'UNCOMPRESSED' : 0,
'SNAPPY' : 1,
'GZIP' : 2,
'LZO' : 3,
'BROTLI' : 4
};
ttypes.PageType = {
'DATA_PAGE' : 0,
'INDEX_PAGE' : 1,
'DICTIONARY_PAGE' : 2,
'DATA_PAGE_V2' : 3
};
var Statistics = module.exports.Statistics = function(args) {
  this.max = null;
  this.min = null;
  this.null_count = null;
  this.distinct_count = null;
  if (args) {
    if (args.max !== undefined) {
      this.max = args.max;
    }
    if (args.min !== undefined) {
      this.min = args.min;
    }
    if (args.null_count !== undefined) {
      this.null_count = args.null_count;
    }
    if (args.distinct_count !== undefined) {
      this.distinct_count = args.distinct_count;
    }
  }
};
Statistics.prototype = {};
Statistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.max = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.min = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.null_count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.distinct_count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Statistics.prototype.write = function(output) {
  output.writeStructBegin('Statistics');
  if (this.max) {
    output.writeFieldBegin('max', Thrift.Type.STRING, 1);
    output.writeString(this.max);
    output.writeFieldEnd();
  }
  if (this.min) {
    output.writeFieldBegin('min', Thrift.Type.STRING, 2);
    output.writeString(this.min);
    output.writeFieldEnd();
  }
  if (this.null_count) {
    output.writeFieldBegin('null_count', Thrift.Type.I64, 3);
    output.writeI64(this.null_count);
    output.writeFieldEnd();
  }
  if (this.distinct_count) {
    output.writeFieldBegin('distinct_count', Thrift.Type.I64, 4);
    output.writeI64(this.distinct_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SchemaElement = module.exports.SchemaElement = function(args) {
  this.type = null;
  this.type_length = null;
  this.repetition_type = null;
  this.name = null;
  this.num_children = null;
  this.converted_type = null;
  this.scale = null;
  this.precision = null;
  this.field_id = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.type_length !== undefined) {
      this.type_length = args.type_length;
    }
    if (args.repetition_type !== undefined) {
      this.repetition_type = args.repetition_type;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.num_children !== undefined) {
      this.num_children = args.num_children;
    }
    if (args.converted_type !== undefined) {
      this.converted_type = args.converted_type;
    }
    if (args.scale !== undefined) {
      this.scale = args.scale;
    }
    if (args.precision !== undefined) {
      this.precision = args.precision;
    }
    if (args.field_id !== undefined) {
      this.field_id = args.field_id;
    }
  }
};
SchemaElement.prototype = {};
SchemaElement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type_length = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.repetition_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.num_children = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.converted_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.scale = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.precision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.field_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchemaElement.prototype.write = function(output) {
  output.writeStructBegin('SchemaElement');
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.type_length) {
    output.writeFieldBegin('type_length', Thrift.Type.I32, 2);
    output.writeI32(this.type_length);
    output.writeFieldEnd();
  }
  if (this.repetition_type) {
    output.writeFieldBegin('repetition_type', Thrift.Type.I32, 3);
    output.writeI32(this.repetition_type);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.num_children) {
    output.writeFieldBegin('num_children', Thrift.Type.I32, 5);
    output.writeI32(this.num_children);
    output.writeFieldEnd();
  }
  if (this.converted_type) {
    output.writeFieldBegin('converted_type', Thrift.Type.I32, 6);
    output.writeI32(this.converted_type);
    output.writeFieldEnd();
  }
  if (this.scale) {
    output.writeFieldBegin('scale', Thrift.Type.I32, 7);
    output.writeI32(this.scale);
    output.writeFieldEnd();
  }
  if (this.precision) {
    output.writeFieldBegin('precision', Thrift.Type.I32, 8);
    output.writeI32(this.precision);
    output.writeFieldEnd();
  }
  if (this.field_id) {
    output.writeFieldBegin('field_id', Thrift.Type.I32, 9);
    output.writeI32(this.field_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataPageHeader = module.exports.DataPageHeader = function(args) {
  this.num_values = null;
  this.encoding = null;
  this.definition_level_encoding = null;
  this.repetition_level_encoding = null;
  this.statistics = null;
  if (args) {
    if (args.num_values !== undefined) {
      this.num_values = args.num_values;
    }
    if (args.encoding !== undefined) {
      this.encoding = args.encoding;
    }
    if (args.definition_level_encoding !== undefined) {
      this.definition_level_encoding = args.definition_level_encoding;
    }
    if (args.repetition_level_encoding !== undefined) {
      this.repetition_level_encoding = args.repetition_level_encoding;
    }
    if (args.statistics !== undefined) {
      this.statistics = args.statistics;
    }
  }
};
DataPageHeader.prototype = {};
DataPageHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num_values = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.definition_level_encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.repetition_level_encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.statistics = new ttypes.Statistics();
        this.statistics.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataPageHeader.prototype.write = function(output) {
  output.writeStructBegin('DataPageHeader');
  if (this.num_values) {
    output.writeFieldBegin('num_values', Thrift.Type.I32, 1);
    output.writeI32(this.num_values);
    output.writeFieldEnd();
  }
  if (this.encoding) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 2);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  if (this.definition_level_encoding) {
    output.writeFieldBegin('definition_level_encoding', Thrift.Type.I32, 3);
    output.writeI32(this.definition_level_encoding);
    output.writeFieldEnd();
  }
  if (this.repetition_level_encoding) {
    output.writeFieldBegin('repetition_level_encoding', Thrift.Type.I32, 4);
    output.writeI32(this.repetition_level_encoding);
    output.writeFieldEnd();
  }
  if (this.statistics) {
    output.writeFieldBegin('statistics', Thrift.Type.STRUCT, 5);
    this.statistics.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IndexPageHeader = module.exports.IndexPageHeader = function(args) {
};
IndexPageHeader.prototype = {};
IndexPageHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexPageHeader.prototype.write = function(output) {
  output.writeStructBegin('IndexPageHeader');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DictionaryPageHeader = module.exports.DictionaryPageHeader = function(args) {
  this.num_values = null;
  this.encoding = null;
  this.is_sorted = null;
  if (args) {
    if (args.num_values !== undefined) {
      this.num_values = args.num_values;
    }
    if (args.encoding !== undefined) {
      this.encoding = args.encoding;
    }
    if (args.is_sorted !== undefined) {
      this.is_sorted = args.is_sorted;
    }
  }
};
DictionaryPageHeader.prototype = {};
DictionaryPageHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num_values = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_sorted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictionaryPageHeader.prototype.write = function(output) {
  output.writeStructBegin('DictionaryPageHeader');
  if (this.num_values) {
    output.writeFieldBegin('num_values', Thrift.Type.I32, 1);
    output.writeI32(this.num_values);
    output.writeFieldEnd();
  }
  if (this.encoding) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 2);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  if (this.is_sorted) {
    output.writeFieldBegin('is_sorted', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_sorted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataPageHeaderV2 = module.exports.DataPageHeaderV2 = function(args) {
  this.num_values = null;
  this.num_nulls = null;
  this.num_rows = null;
  this.encoding = null;
  this.definition_levels_byte_length = null;
  this.repetition_levels_byte_length = null;
  this.is_compressed = true;
  this.statistics = null;
  if (args) {
    if (args.num_values !== undefined) {
      this.num_values = args.num_values;
    }
    if (args.num_nulls !== undefined) {
      this.num_nulls = args.num_nulls;
    }
    if (args.num_rows !== undefined) {
      this.num_rows = args.num_rows;
    }
    if (args.encoding !== undefined) {
      this.encoding = args.encoding;
    }
    if (args.definition_levels_byte_length !== undefined) {
      this.definition_levels_byte_length = args.definition_levels_byte_length;
    }
    if (args.repetition_levels_byte_length !== undefined) {
      this.repetition_levels_byte_length = args.repetition_levels_byte_length;
    }
    if (args.is_compressed !== undefined) {
      this.is_compressed = args.is_compressed;
    }
    if (args.statistics !== undefined) {
      this.statistics = args.statistics;
    }
  }
};
DataPageHeaderV2.prototype = {};
DataPageHeaderV2.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num_values = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.num_nulls = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.num_rows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.definition_levels_byte_length = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.repetition_levels_byte_length = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.is_compressed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.statistics = new ttypes.Statistics();
        this.statistics.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataPageHeaderV2.prototype.write = function(output) {
  output.writeStructBegin('DataPageHeaderV2');
  if (this.num_values) {
    output.writeFieldBegin('num_values', Thrift.Type.I32, 1);
    output.writeI32(this.num_values);
    output.writeFieldEnd();
  }
  if (this.num_nulls) {
    output.writeFieldBegin('num_nulls', Thrift.Type.I32, 2);
    output.writeI32(this.num_nulls);
    output.writeFieldEnd();
  }
  if (this.num_rows) {
    output.writeFieldBegin('num_rows', Thrift.Type.I32, 3);
    output.writeI32(this.num_rows);
    output.writeFieldEnd();
  }
  if (this.encoding) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 4);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  if (this.definition_levels_byte_length) {
    output.writeFieldBegin('definition_levels_byte_length', Thrift.Type.I32, 5);
    output.writeI32(this.definition_levels_byte_length);
    output.writeFieldEnd();
  }
  if (this.repetition_levels_byte_length) {
    output.writeFieldBegin('repetition_levels_byte_length', Thrift.Type.I32, 6);
    output.writeI32(this.repetition_levels_byte_length);
    output.writeFieldEnd();
  }
  if (this.is_compressed) {
    output.writeFieldBegin('is_compressed', Thrift.Type.BOOL, 7);
    output.writeBool(this.is_compressed);
    output.writeFieldEnd();
  }
  if (this.statistics) {
    output.writeFieldBegin('statistics', Thrift.Type.STRUCT, 8);
    this.statistics.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PageHeader = module.exports.PageHeader = function(args) {
  this.type = null;
  this.uncompressed_page_size = null;
  this.compressed_page_size = null;
  this.crc = null;
  this.data_page_header = null;
  this.index_page_header = null;
  this.dictionary_page_header = null;
  this.data_page_header_v2 = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.uncompressed_page_size !== undefined) {
      this.uncompressed_page_size = args.uncompressed_page_size;
    }
    if (args.compressed_page_size !== undefined) {
      this.compressed_page_size = args.compressed_page_size;
    }
    if (args.crc !== undefined) {
      this.crc = args.crc;
    }
    if (args.data_page_header !== undefined) {
      this.data_page_header = args.data_page_header;
    }
    if (args.index_page_header !== undefined) {
      this.index_page_header = args.index_page_header;
    }
    if (args.dictionary_page_header !== undefined) {
      this.dictionary_page_header = args.dictionary_page_header;
    }
    if (args.data_page_header_v2 !== undefined) {
      this.data_page_header_v2 = args.data_page_header_v2;
    }
  }
};
PageHeader.prototype = {};
PageHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.uncompressed_page_size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.compressed_page_size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.crc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_page_header = new ttypes.DataPageHeader();
        this.data_page_header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.index_page_header = new ttypes.IndexPageHeader();
        this.index_page_header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.dictionary_page_header = new ttypes.DictionaryPageHeader();
        this.dictionary_page_header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_page_header_v2 = new ttypes.DataPageHeaderV2();
        this.data_page_header_v2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PageHeader.prototype.write = function(output) {
  output.writeStructBegin('PageHeader');
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.uncompressed_page_size) {
    output.writeFieldBegin('uncompressed_page_size', Thrift.Type.I32, 2);
    output.writeI32(this.uncompressed_page_size);
    output.writeFieldEnd();
  }
  if (this.compressed_page_size) {
    output.writeFieldBegin('compressed_page_size', Thrift.Type.I32, 3);
    output.writeI32(this.compressed_page_size);
    output.writeFieldEnd();
  }
  if (this.crc) {
    output.writeFieldBegin('crc', Thrift.Type.I32, 4);
    output.writeI32(this.crc);
    output.writeFieldEnd();
  }
  if (this.data_page_header) {
    output.writeFieldBegin('data_page_header', Thrift.Type.STRUCT, 5);
    this.data_page_header.write(output);
    output.writeFieldEnd();
  }
  if (this.index_page_header) {
    output.writeFieldBegin('index_page_header', Thrift.Type.STRUCT, 6);
    this.index_page_header.write(output);
    output.writeFieldEnd();
  }
  if (this.dictionary_page_header) {
    output.writeFieldBegin('dictionary_page_header', Thrift.Type.STRUCT, 7);
    this.dictionary_page_header.write(output);
    output.writeFieldEnd();
  }
  if (this.data_page_header_v2) {
    output.writeFieldBegin('data_page_header_v2', Thrift.Type.STRUCT, 8);
    this.data_page_header_v2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeyValue = module.exports.KeyValue = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
KeyValue.prototype = {};
KeyValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyValue.prototype.write = function(output) {
  output.writeStructBegin('KeyValue');
  if (this.key) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SortingColumn = module.exports.SortingColumn = function(args) {
  this.column_idx = null;
  this.descending = null;
  this.nulls_first = null;
  if (args) {
    if (args.column_idx !== undefined) {
      this.column_idx = args.column_idx;
    }
    if (args.descending !== undefined) {
      this.descending = args.descending;
    }
    if (args.nulls_first !== undefined) {
      this.nulls_first = args.nulls_first;
    }
  }
};
SortingColumn.prototype = {};
SortingColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.column_idx = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.descending = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.nulls_first = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SortingColumn.prototype.write = function(output) {
  output.writeStructBegin('SortingColumn');
  if (this.column_idx) {
    output.writeFieldBegin('column_idx', Thrift.Type.I32, 1);
    output.writeI32(this.column_idx);
    output.writeFieldEnd();
  }
  if (this.descending) {
    output.writeFieldBegin('descending', Thrift.Type.BOOL, 2);
    output.writeBool(this.descending);
    output.writeFieldEnd();
  }
  if (this.nulls_first) {
    output.writeFieldBegin('nulls_first', Thrift.Type.BOOL, 3);
    output.writeBool(this.nulls_first);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PageEncodingStats = module.exports.PageEncodingStats = function(args) {
  this.page_type = null;
  this.encoding = null;
  this.count = null;
  if (args) {
    if (args.page_type !== undefined) {
      this.page_type = args.page_type;
    }
    if (args.encoding !== undefined) {
      this.encoding = args.encoding;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
PageEncodingStats.prototype = {};
PageEncodingStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.page_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PageEncodingStats.prototype.write = function(output) {
  output.writeStructBegin('PageEncodingStats');
  if (this.page_type) {
    output.writeFieldBegin('page_type', Thrift.Type.I32, 1);
    output.writeI32(this.page_type);
    output.writeFieldEnd();
  }
  if (this.encoding) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 2);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  if (this.count) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnMetaData = module.exports.ColumnMetaData = function(args) {
  this.type = null;
  this.encodings = null;
  this.path_in_schema = null;
  this.codec = null;
  this.num_values = null;
  this.total_uncompressed_size = null;
  this.total_compressed_size = null;
  this.key_value_metadata = null;
  this.data_page_offset = null;
  this.index_page_offset = null;
  this.dictionary_page_offset = null;
  this.statistics = null;
  this.encoding_stats = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.encodings !== undefined) {
      this.encodings = args.encodings;
    }
    if (args.path_in_schema !== undefined) {
      this.path_in_schema = args.path_in_schema;
    }
    if (args.codec !== undefined) {
      this.codec = args.codec;
    }
    if (args.num_values !== undefined) {
      this.num_values = args.num_values;
    }
    if (args.total_uncompressed_size !== undefined) {
      this.total_uncompressed_size = args.total_uncompressed_size;
    }
    if (args.total_compressed_size !== undefined) {
      this.total_compressed_size = args.total_compressed_size;
    }
    if (args.key_value_metadata !== undefined) {
      this.key_value_metadata = args.key_value_metadata;
    }
    if (args.data_page_offset !== undefined) {
      this.data_page_offset = args.data_page_offset;
    }
    if (args.index_page_offset !== undefined) {
      this.index_page_offset = args.index_page_offset;
    }
    if (args.dictionary_page_offset !== undefined) {
      this.dictionary_page_offset = args.dictionary_page_offset;
    }
    if (args.statistics !== undefined) {
      this.statistics = args.statistics;
    }
    if (args.encoding_stats !== undefined) {
      this.encoding_stats = args.encoding_stats;
    }
  }
};
ColumnMetaData.prototype = {};
ColumnMetaData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.encodings = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.encodings.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.path_in_schema = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.path_in_schema.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.codec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.num_values = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.total_uncompressed_size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.total_compressed_size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.key_value_metadata = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new ttypes.KeyValue();
          elem20.read(input);
          this.key_value_metadata.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.data_page_offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.index_page_offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.dictionary_page_offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.statistics = new ttypes.Statistics();
        this.statistics.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.encoding_stats = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = new ttypes.PageEncodingStats();
          elem27.read(input);
          this.encoding_stats.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnMetaData.prototype.write = function(output) {
  output.writeStructBegin('ColumnMetaData');
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.encodings) {
    output.writeFieldBegin('encodings', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.encodings.length);
    for (var iter28 in this.encodings)
    {
      if (this.encodings.hasOwnProperty(iter28))
      {
        iter28 = this.encodings[iter28];
        output.writeI32(iter28);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.path_in_schema) {
    output.writeFieldBegin('path_in_schema', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.path_in_schema.length);
    for (var iter29 in this.path_in_schema)
    {
      if (this.path_in_schema.hasOwnProperty(iter29))
      {
        iter29 = this.path_in_schema[iter29];
        output.writeString(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.codec) {
    output.writeFieldBegin('codec', Thrift.Type.I32, 4);
    output.writeI32(this.codec);
    output.writeFieldEnd();
  }
  if (this.num_values) {
    output.writeFieldBegin('num_values', Thrift.Type.I64, 5);
    output.writeI64(this.num_values);
    output.writeFieldEnd();
  }
  if (this.total_uncompressed_size) {
    output.writeFieldBegin('total_uncompressed_size', Thrift.Type.I64, 6);
    output.writeI64(this.total_uncompressed_size);
    output.writeFieldEnd();
  }
  if (this.total_compressed_size) {
    output.writeFieldBegin('total_compressed_size', Thrift.Type.I64, 7);
    output.writeI64(this.total_compressed_size);
    output.writeFieldEnd();
  }
  if (this.key_value_metadata) {
    output.writeFieldBegin('key_value_metadata', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.key_value_metadata.length);
    for (var iter30 in this.key_value_metadata)
    {
      if (this.key_value_metadata.hasOwnProperty(iter30))
      {
        iter30 = this.key_value_metadata[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.data_page_offset) {
    output.writeFieldBegin('data_page_offset', Thrift.Type.I64, 9);
    output.writeI64(this.data_page_offset);
    output.writeFieldEnd();
  }
  if (this.index_page_offset) {
    output.writeFieldBegin('index_page_offset', Thrift.Type.I64, 10);
    output.writeI64(this.index_page_offset);
    output.writeFieldEnd();
  }
  if (this.dictionary_page_offset) {
    output.writeFieldBegin('dictionary_page_offset', Thrift.Type.I64, 11);
    output.writeI64(this.dictionary_page_offset);
    output.writeFieldEnd();
  }
  if (this.statistics) {
    output.writeFieldBegin('statistics', Thrift.Type.STRUCT, 12);
    this.statistics.write(output);
    output.writeFieldEnd();
  }
  if (this.encoding_stats) {
    output.writeFieldBegin('encoding_stats', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.encoding_stats.length);
    for (var iter31 in this.encoding_stats)
    {
      if (this.encoding_stats.hasOwnProperty(iter31))
      {
        iter31 = this.encoding_stats[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnChunk = module.exports.ColumnChunk = function(args) {
  this.file_path = null;
  this.file_offset = null;
  this.meta_data = null;
  if (args) {
    if (args.file_path !== undefined) {
      this.file_path = args.file_path;
    }
    if (args.file_offset !== undefined) {
      this.file_offset = args.file_offset;
    }
    if (args.meta_data !== undefined) {
      this.meta_data = args.meta_data;
    }
  }
};
ColumnChunk.prototype = {};
ColumnChunk.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.file_offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meta_data = new ttypes.ColumnMetaData();
        this.meta_data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnChunk.prototype.write = function(output) {
  output.writeStructBegin('ColumnChunk');
  if (this.file_path) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  if (this.file_offset) {
    output.writeFieldBegin('file_offset', Thrift.Type.I64, 2);
    output.writeI64(this.file_offset);
    output.writeFieldEnd();
  }
  if (this.meta_data) {
    output.writeFieldBegin('meta_data', Thrift.Type.STRUCT, 3);
    this.meta_data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RowGroup = module.exports.RowGroup = function(args) {
  this.columns = null;
  this.total_byte_size = null;
  this.num_rows = null;
  this.sorting_columns = null;
  if (args) {
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.total_byte_size !== undefined) {
      this.total_byte_size = args.total_byte_size;
    }
    if (args.num_rows !== undefined) {
      this.num_rows = args.num_rows;
    }
    if (args.sorting_columns !== undefined) {
      this.sorting_columns = args.sorting_columns;
    }
  }
};
RowGroup.prototype = {};
RowGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.columns = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.ColumnChunk();
          elem38.read(input);
          this.columns.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.total_byte_size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.num_rows = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.sorting_columns = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new ttypes.SortingColumn();
          elem45.read(input);
          this.sorting_columns.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RowGroup.prototype.write = function(output) {
  output.writeStructBegin('RowGroup');
  if (this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter46 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter46))
      {
        iter46 = this.columns[iter46];
        iter46.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.total_byte_size) {
    output.writeFieldBegin('total_byte_size', Thrift.Type.I64, 2);
    output.writeI64(this.total_byte_size);
    output.writeFieldEnd();
  }
  if (this.num_rows) {
    output.writeFieldBegin('num_rows', Thrift.Type.I64, 3);
    output.writeI64(this.num_rows);
    output.writeFieldEnd();
  }
  if (this.sorting_columns) {
    output.writeFieldBegin('sorting_columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.sorting_columns.length);
    for (var iter47 in this.sorting_columns)
    {
      if (this.sorting_columns.hasOwnProperty(iter47))
      {
        iter47 = this.sorting_columns[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileMetaData = module.exports.FileMetaData = function(args) {
  this.version = null;
  this.schema = null;
  this.num_rows = null;
  this.row_groups = null;
  this.key_value_metadata = null;
  this.created_by = null;
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.schema !== undefined) {
      this.schema = args.schema;
    }
    if (args.num_rows !== undefined) {
      this.num_rows = args.num_rows;
    }
    if (args.row_groups !== undefined) {
      this.row_groups = args.row_groups;
    }
    if (args.key_value_metadata !== undefined) {
      this.key_value_metadata = args.key_value_metadata;
    }
    if (args.created_by !== undefined) {
      this.created_by = args.created_by;
    }
  }
};
FileMetaData.prototype = {};
FileMetaData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.schema = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.SchemaElement();
          elem54.read(input);
          this.schema.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.num_rows = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size55 = 0;
        var _rtmp359;
        this.row_groups = [];
        var _etype58 = 0;
        _rtmp359 = input.readListBegin();
        _etype58 = _rtmp359.etype;
        _size55 = _rtmp359.size;
        for (var _i60 = 0; _i60 < _size55; ++_i60)
        {
          var elem61 = null;
          elem61 = new ttypes.RowGroup();
          elem61.read(input);
          this.row_groups.push(elem61);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.key_value_metadata = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = new ttypes.KeyValue();
          elem68.read(input);
          this.key_value_metadata.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.created_by = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileMetaData.prototype.write = function(output) {
  output.writeStructBegin('FileMetaData');
  if (this.version) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.schema) {
    output.writeFieldBegin('schema', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.schema.length);
    for (var iter69 in this.schema)
    {
      if (this.schema.hasOwnProperty(iter69))
      {
        iter69 = this.schema[iter69];
        iter69.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.num_rows) {
    output.writeFieldBegin('num_rows', Thrift.Type.I64, 3);
    output.writeI64(this.num_rows);
    output.writeFieldEnd();
  }
  if (this.row_groups) {
    output.writeFieldBegin('row_groups', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_groups.length);
    for (var iter70 in this.row_groups)
    {
      if (this.row_groups.hasOwnProperty(iter70))
      {
        iter70 = this.row_groups[iter70];
        iter70.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.key_value_metadata) {
    output.writeFieldBegin('key_value_metadata', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.key_value_metadata.length);
    for (var iter71 in this.key_value_metadata)
    {
      if (this.key_value_metadata.hasOwnProperty(iter71))
      {
        iter71 = this.key_value_metadata[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.created_by) {
    output.writeFieldBegin('created_by', Thrift.Type.STRING, 6);
    output.writeString(this.created_by);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};




